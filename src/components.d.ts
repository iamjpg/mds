/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BtnType, ButtonTypeAttribute } from "./components/mx-button/mx-button";
export namespace Components {
    interface MxBadge {
        /**
          * Additional classes to add to the badge itself
         */
        "badgeClass": string;
        /**
          * Anchor the badge to the bottom of the wrapped content
         */
        "bottom": boolean;
        /**
          * Display as a small dot (no value)
         */
        "dot": boolean;
        /**
          * Class name of icon
         */
        "icon": string;
        /**
          * Anchor the badge to the left of the wrapped content
         */
        "left": boolean;
        /**
          * Offset badge inward by this many pixels (e.g. 10 for icon buttons)
         */
        "offset": number;
        /**
          * Make the corners a little more square (best for standalone text)
         */
        "squared": boolean;
        /**
          * The value to display inside the badge
         */
        "value": any;
    }
    interface MxButton {
        "btnType": BtnType;
        "disabled": boolean;
        /**
          * Show chevron icon
         */
        "dropdown": boolean;
        /**
          * Sets display to flex instead of inline-flex
         */
        "full": boolean;
        /**
          * Create button as link
         */
        "href": string;
        /**
          * Class name of icon
         */
        "icon": string;
        /**
          * Only for link buttons
         */
        "target": string;
        "type": ButtonTypeAttribute;
        "value": string;
        "xl": boolean;
    }
    interface MxCheckbox {
        "checked": boolean;
        "labelName": string;
        "name": string;
        "value": string;
    }
    interface MxInput {
        "assistiveText": string;
        "dense": boolean;
        "error": boolean;
        "isActive": boolean;
        "isFocused": boolean;
        "label": string;
        "labelClass": string;
        "leftIcon": string;
        "name": string;
        "outerContainerClass": string;
        "rightIcon": string;
        "textarea": boolean;
        "textareaHeight": string;
        "type": string;
        "value": string;
    }
    interface MxRadio {
        "checked": boolean;
        "labelName": string;
        "name": string;
        "value": string;
    }
    interface MxSwitch {
        "checked": boolean;
        "labelName": string;
        "name": string;
        "value": string;
    }
    interface MxTab {
        /**
          * If you are not providing a `label`, this should be provided instead for accessibility
         */
        "ariaLabel": string;
        /**
          * Display a dot badge
         */
        "badge": boolean;
        /**
          * Additional classes for the badge
         */
        "badgeClass": string;
        /**
          * Class name of icon to display
         */
        "icon": string;
        /**
          * Label text to display
         */
        "label": string;
        /**
          * Only set this if you are not using the `mx-tabs` `value` prop
         */
        "selected": boolean;
    }
    interface MxTabContent {
        /**
          * The index of the tab that corresponds to this content
         */
        "index": number;
        /**
          * The index of the selected tab
         */
        "value": number;
    }
    interface MxTabs {
        /**
          * Stretch tabs to fill the entire width
         */
        "fill": boolean;
        /**
          * The index of the selected tab (not needed if manually setting the `selected` prop on each tab)
         */
        "value": number;
    }
    interface MxToggleButton {
        "disabled": boolean;
        "icon": string;
        "selected": boolean;
        /**
          * Only used inside a toggle button group
         */
        "value": any;
    }
    interface MxToggleButtonGroup {
        "value": any;
    }
}
declare global {
    interface HTMLMxBadgeElement extends Components.MxBadge, HTMLStencilElement {
    }
    var HTMLMxBadgeElement: {
        prototype: HTMLMxBadgeElement;
        new (): HTMLMxBadgeElement;
    };
    interface HTMLMxButtonElement extends Components.MxButton, HTMLStencilElement {
    }
    var HTMLMxButtonElement: {
        prototype: HTMLMxButtonElement;
        new (): HTMLMxButtonElement;
    };
    interface HTMLMxCheckboxElement extends Components.MxCheckbox, HTMLStencilElement {
    }
    var HTMLMxCheckboxElement: {
        prototype: HTMLMxCheckboxElement;
        new (): HTMLMxCheckboxElement;
    };
    interface HTMLMxInputElement extends Components.MxInput, HTMLStencilElement {
    }
    var HTMLMxInputElement: {
        prototype: HTMLMxInputElement;
        new (): HTMLMxInputElement;
    };
    interface HTMLMxRadioElement extends Components.MxRadio, HTMLStencilElement {
    }
    var HTMLMxRadioElement: {
        prototype: HTMLMxRadioElement;
        new (): HTMLMxRadioElement;
    };
    interface HTMLMxSwitchElement extends Components.MxSwitch, HTMLStencilElement {
    }
    var HTMLMxSwitchElement: {
        prototype: HTMLMxSwitchElement;
        new (): HTMLMxSwitchElement;
    };
    interface HTMLMxTabElement extends Components.MxTab, HTMLStencilElement {
    }
    var HTMLMxTabElement: {
        prototype: HTMLMxTabElement;
        new (): HTMLMxTabElement;
    };
    interface HTMLMxTabContentElement extends Components.MxTabContent, HTMLStencilElement {
    }
    var HTMLMxTabContentElement: {
        prototype: HTMLMxTabContentElement;
        new (): HTMLMxTabContentElement;
    };
    interface HTMLMxTabsElement extends Components.MxTabs, HTMLStencilElement {
    }
    var HTMLMxTabsElement: {
        prototype: HTMLMxTabsElement;
        new (): HTMLMxTabsElement;
    };
    interface HTMLMxToggleButtonElement extends Components.MxToggleButton, HTMLStencilElement {
    }
    var HTMLMxToggleButtonElement: {
        prototype: HTMLMxToggleButtonElement;
        new (): HTMLMxToggleButtonElement;
    };
    interface HTMLMxToggleButtonGroupElement extends Components.MxToggleButtonGroup, HTMLStencilElement {
    }
    var HTMLMxToggleButtonGroupElement: {
        prototype: HTMLMxToggleButtonGroupElement;
        new (): HTMLMxToggleButtonGroupElement;
    };
    interface HTMLElementTagNameMap {
        "mx-badge": HTMLMxBadgeElement;
        "mx-button": HTMLMxButtonElement;
        "mx-checkbox": HTMLMxCheckboxElement;
        "mx-input": HTMLMxInputElement;
        "mx-radio": HTMLMxRadioElement;
        "mx-switch": HTMLMxSwitchElement;
        "mx-tab": HTMLMxTabElement;
        "mx-tab-content": HTMLMxTabContentElement;
        "mx-tabs": HTMLMxTabsElement;
        "mx-toggle-button": HTMLMxToggleButtonElement;
        "mx-toggle-button-group": HTMLMxToggleButtonGroupElement;
    }
}
declare namespace LocalJSX {
    interface MxBadge {
        /**
          * Additional classes to add to the badge itself
         */
        "badgeClass"?: string;
        /**
          * Anchor the badge to the bottom of the wrapped content
         */
        "bottom"?: boolean;
        /**
          * Display as a small dot (no value)
         */
        "dot"?: boolean;
        /**
          * Class name of icon
         */
        "icon"?: string;
        /**
          * Anchor the badge to the left of the wrapped content
         */
        "left"?: boolean;
        /**
          * Offset badge inward by this many pixels (e.g. 10 for icon buttons)
         */
        "offset"?: number;
        /**
          * Make the corners a little more square (best for standalone text)
         */
        "squared"?: boolean;
        /**
          * The value to display inside the badge
         */
        "value"?: any;
    }
    interface MxButton {
        "btnType"?: BtnType;
        "disabled"?: boolean;
        /**
          * Show chevron icon
         */
        "dropdown"?: boolean;
        /**
          * Sets display to flex instead of inline-flex
         */
        "full"?: boolean;
        /**
          * Create button as link
         */
        "href"?: string;
        /**
          * Class name of icon
         */
        "icon"?: string;
        /**
          * Only for link buttons
         */
        "target"?: string;
        "type"?: ButtonTypeAttribute;
        "value"?: string;
        "xl"?: boolean;
    }
    interface MxCheckbox {
        "checked"?: boolean;
        "labelName"?: string;
        "name"?: string;
        "value"?: string;
    }
    interface MxInput {
        "assistiveText"?: string;
        "dense"?: boolean;
        "error"?: boolean;
        "isActive"?: boolean;
        "isFocused"?: boolean;
        "label"?: string;
        "labelClass"?: string;
        "leftIcon"?: string;
        "name"?: string;
        "outerContainerClass"?: string;
        "rightIcon"?: string;
        "textarea"?: boolean;
        "textareaHeight"?: string;
        "type"?: string;
        "value"?: string;
    }
    interface MxRadio {
        "checked"?: boolean;
        "labelName"?: string;
        "name"?: string;
        "value"?: string;
    }
    interface MxSwitch {
        "checked"?: boolean;
        "labelName"?: string;
        "name"?: string;
        "value"?: string;
    }
    interface MxTab {
        /**
          * If you are not providing a `label`, this should be provided instead for accessibility
         */
        "ariaLabel"?: string;
        /**
          * Display a dot badge
         */
        "badge"?: boolean;
        /**
          * Additional classes for the badge
         */
        "badgeClass"?: string;
        /**
          * Class name of icon to display
         */
        "icon"?: string;
        /**
          * Label text to display
         */
        "label"?: string;
        /**
          * Only set this if you are not using the `mx-tabs` `value` prop
         */
        "selected"?: boolean;
    }
    interface MxTabContent {
        /**
          * The index of the tab that corresponds to this content
         */
        "index"?: number;
        /**
          * The index of the selected tab
         */
        "value"?: number;
    }
    interface MxTabs {
        /**
          * Stretch tabs to fill the entire width
         */
        "fill"?: boolean;
        /**
          * Emits the clicked tab's index as `Event.detail`
         */
        "onMxChange"?: (event: CustomEvent<number>) => void;
        /**
          * The index of the selected tab (not needed if manually setting the `selected` prop on each tab)
         */
        "value"?: number;
    }
    interface MxToggleButton {
        "disabled"?: boolean;
        "icon"?: string;
        "selected"?: boolean;
        /**
          * Only used inside a toggle button group
         */
        "value"?: any;
    }
    interface MxToggleButtonGroup {
        /**
          * Emits the updated value as event.detail
         */
        "onMxInput"?: (event: CustomEvent<any>) => void;
        "value"?: any;
    }
    interface IntrinsicElements {
        "mx-badge": MxBadge;
        "mx-button": MxButton;
        "mx-checkbox": MxCheckbox;
        "mx-input": MxInput;
        "mx-radio": MxRadio;
        "mx-switch": MxSwitch;
        "mx-tab": MxTab;
        "mx-tab-content": MxTabContent;
        "mx-tabs": MxTabs;
        "mx-toggle-button": MxToggleButton;
        "mx-toggle-button-group": MxToggleButtonGroup;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mx-badge": LocalJSX.MxBadge & JSXBase.HTMLAttributes<HTMLMxBadgeElement>;
            "mx-button": LocalJSX.MxButton & JSXBase.HTMLAttributes<HTMLMxButtonElement>;
            "mx-checkbox": LocalJSX.MxCheckbox & JSXBase.HTMLAttributes<HTMLMxCheckboxElement>;
            "mx-input": LocalJSX.MxInput & JSXBase.HTMLAttributes<HTMLMxInputElement>;
            "mx-radio": LocalJSX.MxRadio & JSXBase.HTMLAttributes<HTMLMxRadioElement>;
            "mx-switch": LocalJSX.MxSwitch & JSXBase.HTMLAttributes<HTMLMxSwitchElement>;
            "mx-tab": LocalJSX.MxTab & JSXBase.HTMLAttributes<HTMLMxTabElement>;
            "mx-tab-content": LocalJSX.MxTabContent & JSXBase.HTMLAttributes<HTMLMxTabContentElement>;
            "mx-tabs": LocalJSX.MxTabs & JSXBase.HTMLAttributes<HTMLMxTabsElement>;
            "mx-toggle-button": LocalJSX.MxToggleButton & JSXBase.HTMLAttributes<HTMLMxToggleButtonElement>;
            "mx-toggle-button-group": LocalJSX.MxToggleButtonGroup & JSXBase.HTMLAttributes<HTMLMxToggleButtonGroupElement>;
        }
    }
}
